punycode = require('punycode')
esrever = require('esrever')

get_code = (i) ->
  return punycode.ucs2.encode([alphabet[i]])

exports.encode = (i) ->
  return get_code(i) if i is 0
  s = ""
  while i > 0
    s += get_code(i % base)
    i = parseInt(i / base, 10)

  esrever.reverse(s)

exports.decode = (s) ->
  i = 0
  decoded = punycode.ucs2.decode(s)
  for c in decoded
    i = i * base + alphabet.indexOf c
  i

alphabet = [
  # Emoticons (1F601 - 1F64F)
  0x1F601,
  0x1F602,
  0x1F603,
  0x1F604,
  0x1F605,
  0x1F606,
  0x1F609,
  0x1F60A,
  0x1F60B,
  0x1F60D,
  0x1F60D,
  0x1F60F,
  0x1F612,
  0x1F613,
  0x1F614,
  0x1F616,
  0x1F618,
  0x1F61A,
  0x1F61C,
  0x1F61D,
  0x1F61E,
  0x1F620,
  0x1F621,
  0x1F622,
  0x1F623,
  0x1F624,
  0x1F625,
  0x1F628,
  0x1F629,
  0x1F62A,
  0x1F62B,
  0x1F62D,
  0x1F630,
  0x1F631,
  0x1F632,
  0x1F633,
  0x1F635,
  0x1F637,
  0x1F638,
  0x1F639,
  0x1F63A,
  0x1F63B,
  0x1F63C,
  0x1F63D,
  0x1F63E,
  0x1F63F,
  0x1F640,
  0x1F645,
  0x1F646,
  0x1F647,
  0x1F648,
  0x1F649,
  0x1F64A,
  0x1F64B,
  0x1F64C,
  0x1F64D,
  0x1F64E,
  0x1F64F,
  # Dingbats (2702 - 27B0 )
  0x2702,
  0x2705,
  0x2708,
  0x2709,
  0x270A,
  0x270B,
  0x270C,
  0x270F,
  0x2712,
  0x2714,
  0x2716,
  0x2728,
  0x2733,
  0x2734,
  0x2744,
  0x2747,
  0x274E,
  0x274E,
  0x2753,
  0x2754,
  0x2755,
  0x2757,
  0x2764,
  0x2795,
  0x2796,
  0x2797,
  0x27A1,
  0x27B0,
  # Transport and map symbols ( 1F680 - 1F6C0 )
  0x1F680

]
base = alphabet.length